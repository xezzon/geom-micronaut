<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>io.github.xezzon</groupId>
    <artifactId>geom</artifactId>
    <version>1.0-SNAPSHOT</version>
  </parent>
  <artifactId>geom-service</artifactId>
  <packaging>pom</packaging>

  <modules>
    <module>geom-service-admin</module>
    <module>geom-service-openapi</module>
  </modules>

  <properties>
    <maven.compiler.source>17</maven.compiler.source>
    <maven.compiler.target>17</maven.compiler.target>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <!-- 应用端口号 -->
    <app.port>8080</app.port>
    <!-- JavaAgent 存放路径 -->
    <agent-extraction-root>${maven.multiModuleProjectDirectory}/agent</agent-extraction-root>
    <!-- JavaAgent 在Docker中的路径 -->
    <agent-path>/opt/agent</agent-path>
    <workdir>/app</workdir>
    <docker.host>ghcr.io/xezzon</docker.host>
    <!-- JavaAgent 名称 -->
    <opentelemetry-javaagent.name>opentelemetry-javaagent-2.2.0.jar</opentelemetry-javaagent.name>
    <otel-ali-extension.name>ot-java-agent-extension-1.28.0.jar</otel-ali-extension.name>
  </properties>

  <dependencies>
    <!-- 一方库 -->
    <dependency>
      <groupId>io.github.xezzon</groupId>
      <artifactId>geom-common</artifactId>
      <version>1.0-SNAPSHOT</version>
    </dependency>
    <!-- Micronaut -->
    <dependency>
      <groupId>io.micronaut</groupId>
      <artifactId>micronaut-context</artifactId>
    </dependency>
    <dependency>
      <groupId>io.micronaut.toml</groupId>
      <artifactId>micronaut-toml</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>io.micronaut.validation</groupId>
      <artifactId>micronaut-validation</artifactId>
    </dependency>
    <!-- web相关 -->
    <dependency>
      <groupId>io.micronaut.servlet</groupId>
      <artifactId>micronaut-http-server-undertow</artifactId>
    </dependency>
    <dependency>
      <groupId>io.micronaut</groupId>
      <artifactId>micronaut-jackson-databind</artifactId>
    </dependency>
    <!-- 数据库相关依赖 -->
    <dependency>
      <groupId>io.micronaut.data</groupId>
      <artifactId>micronaut-data-hibernate-jpa</artifactId>
    </dependency>
    <dependency>
      <groupId>io.micronaut.sql</groupId>
      <artifactId>micronaut-jdbc-hikari</artifactId>
    </dependency>
    <dependency>
      <groupId>com.querydsl</groupId>
      <artifactId>querydsl-jpa</artifactId>
      <version>${querydsl.version}</version>
      <classifier>jakarta</classifier>
    </dependency>
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <scope>runtime</scope>
    </dependency>
    <!-- 测试依赖 -->
    <dependency>
      <groupId>io.micronaut.test</groupId>
      <artifactId>micronaut-test-junit5</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.platform</groupId>
      <artifactId>junit-platform-launcher</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>junit-jupiter</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>postgresql</artifactId>
      <scope>test</scope>
    </dependency>
    <!-- 工具类 -->
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>io.micronaut.liquibase</groupId>
      <artifactId>micronaut-liquibase</artifactId>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>io.micronaut.maven</groupId>
        <artifactId>micronaut-maven-plugin</artifactId>
        <version>${micronaut.version}</version>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <annotationProcessorPaths combine.children="append">
            <path>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok</artifactId>
              <version>${lombok.version}</version>
            </path>
            <path>
              <groupId>org.mapstruct</groupId>
              <artifactId>mapstruct-processor</artifactId>
              <version>${mapstruct.version}</version>
            </path>
            <path>
              <groupId>io.micronaut</groupId>
              <artifactId>micronaut-inject-java</artifactId>
              <version>${micronaut.version}</version>
            </path>
            <path>
              <groupId>io.micronaut.data</groupId>
              <artifactId>micronaut-data-processor</artifactId>
              <version>${micronaut.data.version}</version>
              <exclusions>
                <exclusion>
                  <groupId>io.micronaut</groupId>
                  <artifactId>micronaut-inject</artifactId>
                </exclusion>
              </exclusions>
            </path>
            <path>
              <groupId>io.micronaut.openapi</groupId>
              <artifactId>micronaut-openapi</artifactId>
              <version>${micronaut.openapi.version}</version>
              <exclusions>
                <exclusion>
                  <groupId>io.micronaut</groupId>
                  <artifactId>micronaut-inject</artifactId>
                </exclusion>
              </exclusions>
            </path>
            <path>
              <groupId>io.micronaut.validation</groupId>
              <artifactId>micronaut-validation-processor</artifactId>
              <version>${micronaut.validation.version}</version>
              <exclusions>
                <exclusion>
                  <groupId>io.micronaut</groupId>
                  <artifactId>micronaut-inject</artifactId>
                </exclusion>
              </exclusions>
            </path>
            <path>
              <groupId>com.querydsl</groupId>
              <artifactId>querydsl-apt</artifactId>
              <version>${querydsl.version}</version>
              <classifier>jakarta</classifier>
            </path>
          </annotationProcessorPaths>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>docker</id>
      <build>
        <plugins>
          <plugin>
            <groupId>com.google.cloud.tools</groupId>
            <artifactId>jib-maven-plugin</artifactId>
            <configuration>
              <from>
                <platforms>
                  <platform>
                    <architecture>amd64</architecture>
                    <os>linux</os>
                  </platform>
                  <platform>
                    <architecture>arm64</architecture>
                    <os>linux</os>
                  </platform>
                </platforms>
              </from>
              <to>
                <image>${docker.host}/${project.artifactId}:${project.version}</image>
              </to>
              <container>
                <environment>
                  <OTEL_LOGS_EXPORTER>otlp</OTEL_LOGS_EXPORTER>
                  <OTEL_SERVICE_NAME>${project.artifactId}</OTEL_SERVICE_NAME>
                  <OTEL_SDK_DISABLED>true</OTEL_SDK_DISABLED>
                  <OTEL_JAVA_EXTENSIONS>${agent-path}/${otel-ali-extension.name}</OTEL_JAVA_EXTENSIONS>
                </environment>
                <ports>
                  <port>${app.port}</port>
                </ports>
                <volumes>
                  <volume>${workdir}/resources</volume>
                  <volume>${agent-path}</volume>
                </volumes>
                <jvmFlags>
                  <jvmFlag>-javaagent:${agent-path}/${opentelemetry-javaagent.name}</jvmFlag>
                </jvmFlags>
                <appRoot>${workdir}</appRoot>
                <workingDirectory>${workdir}</workingDirectory>
                <format>Docker</format>
              </container>
              <extraDirectories>
                <paths>
                  <path>
                    <from>${agent-extraction-root}</from>
                    <into>${agent-path}</into>
                  </path>
                </paths>
              </extraDirectories>
            </configuration>
            <executions>
              <execution>
                <phase>deploy</phase>
                <goals>
                  <goal>build</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
